// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Db.Migrations
{
    [DbContext(typeof(AdventureContext))]
    [Migration("20220525120646_Constraints")]
    partial class Constraints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Db.Adventure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdventureScriptId")
                        .HasColumnType("int");

                    b.Property<int>("AdventureStateId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScriptStepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdventureScriptId");

                    b.HasIndex("AdventureStateId");

                    b.HasIndex("CurrentScriptStepId");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("Db.AdventureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<int>("AdventureScriptStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventureScriptStepId");

                    b.HasIndex(new[] { "AdventureId", "AdventureScriptStepId" }, "UC_AdventureLog_AdventureId_AdventureScriptStepId")
                        .IsUnique();

                    b.ToTable("AdventureLogs");
                });

            modelBuilder.Entity("Db.AdventureScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdventureScripts");
                });

            modelBuilder.Entity("Db.AdventureScriptStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdventureScriptId")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ParentStepId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdventureScriptId");

                    b.HasIndex("ParentStepId");

                    b.ToTable("AdventureScriptSteps");
                });

            modelBuilder.Entity("Db.AdventureStateEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdventureState");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Impossible"
                        },
                        new
                        {
                            Id = 1,
                            Title = "NotStarted"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Finished"
                        });
                });

            modelBuilder.Entity("Db.Adventure", b =>
                {
                    b.HasOne("Db.AdventureScript", null)
                        .WithMany()
                        .HasForeignKey("AdventureScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.AdventureStateEntity", null)
                        .WithMany()
                        .HasForeignKey("AdventureStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Db.AdventureScriptStep", null)
                        .WithMany()
                        .HasForeignKey("CurrentScriptStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.AdventureLog", b =>
                {
                    b.HasOne("Db.Adventure", "Adventure")
                        .WithMany("Logs")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.AdventureScriptStep", null)
                        .WithMany()
                        .HasForeignKey("AdventureScriptStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("Db.AdventureScriptStep", b =>
                {
                    b.HasOne("Db.AdventureScript", "AdventureScript")
                        .WithMany("AdventureScriptSteps")
                        .HasForeignKey("AdventureScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.AdventureScriptStep", "ParentStep")
                        .WithMany("Options")
                        .HasForeignKey("ParentStepId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdventureScript");

                    b.Navigation("ParentStep");
                });

            modelBuilder.Entity("Db.Adventure", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Db.AdventureScript", b =>
                {
                    b.Navigation("AdventureScriptSteps");
                });

            modelBuilder.Entity("Db.AdventureScriptStep", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
